# Example of /usr/share/ssu/board-mappings.ini
#
# This file is used by ssu to find out which device (or device variant) it's
# running on, and use this information to look for device family, and device
# specific adaptation(s). The last two values are used when resolving URLs,
# and therefore change depending on vendor setup.
#
# To avoid quoting in the search strings ssu will do each checks on the
# _value_, and return the key, if successful. The device model returned
# my either be the device model, or a variant. Before resolving the family
# and adaptations variants will be resolved through entries under the
# variants category.
#
# Valid categories for determining the model:
# - file.exists -- checks for existince of a file in the filesystem
# - hwrelease.device -- Compares MER_HA_DEVICE in /etc/hw-release
# - cpuinfo.contains -- searches /proc/cpuinfo for a string
# - uname-release.contains -- searches the kernels release string for
#         a string (uname -r)
# - arch.equals -- compares with zyppers arch (like i586)
#
# Resolve order is:
#  file.exists -> cpuinfo.contains -> hwrelease.device
#   -> uname-release.contains -> arch.equals
#
# The found model (after resolving variants) will be used as category. The
# following keys are valid there:
# - family -- the device family, used for the family specific adaptation
# - adaptation-repos -- list of adaptation repositories for this family
#
# The value of adaptation-repos gets converted into a QStringList, which
# uses commas as separator. If one of the adaptation names contains a comma
# it needs to be quoted:
#   adaptation-repos=foo
#   adaptation-repos="foo, bar", baz
#   adaptation-repos=foo, bar, baz
#
# The adaptation list is used to create repo files for adaptation repos.
# A repository named 'adaptation0' operates on the first list element,
# 'adaptation2' on the 3rd, etc. The matching item in the list will be
# exported as adaptation variable.
#
# Freeform variable sections start with 'var-'. A variable section for an
# adaptation named 'n9xx' would be 'var-n9xx'. A variable section may
# contain freeform variables, and/or the keyword 'variables' to include any
# other section.
#
# Sections are resolved in the order specified, overwriting existing variables
# in the resolving order (set your systems log to DEBUG and check for warnings
# if you run into problems). The main section is resolved last, thus taking
# precedence over any section specified.
#
# Variables starting with _ are treated as 'local', and are not available for
# URL resolving. Additional variables can be declared as local by using the
# special key 'local' with a stringlist of variables.
#
# If available a default-section is used to initialize variables before
# resolving starts. To find a default section the section name is split at
# '-', and the first (for var- second) token replaced with 'default' (e.g.
# foo-bar -> default-bar; var-foo-bar -> var-default-bar). As additional
# dashes would mess this detection up you should try to avoid dashes in
# section identifiers where this functionality is desired.
#
# Valid examples are:
#
# [var-n9]
# local=foo
# foo=bar
# bar=baz
#
# [var-n950]
# variables=n9,n950
#
# The N9x mappings should be solved through sysinfo, but that's currently
# broken on Mer/Nemo

[file.exists]
SDK=/mer-sdk-chroot

[cpuinfo.contains]
N900=Nokia RX-51 board
N950=Nokia RM-680 board
N9=Nokia RM-696 board

[hwrelease.device]
mako=mako
grouper=grouper

[arch.equals]
generic-x86=i586

[variants]
N950=N9

[N9]
family=n950-n9
adaptation-repos=n9xx-common,n950-n9

[N900]
family=n900
adaptation-repos=n9xx-common,n900

[SDK]

[generic-x86]
family=x86
adaptation-repos=x86

[UNKNOWN]
family=UNKNOWN
